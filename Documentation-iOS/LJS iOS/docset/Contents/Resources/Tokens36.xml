<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/LjsKeychainManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/LjsKeychainManager</TokenIdentifier>
			<Abstract>It is a common design pattern to have a username stored in defaults and a
password optionally (user controlled) stored in the Keychain.
LjsKeychainManager provides methods to bridge the Keychain Access API (using
the SFHFKeychainUtils) and the User Defaults API.</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>
			
			<NodeRef refid="36"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/isValidUsername:</TokenIdentifier>
			<Abstract>used to determine the validity of a username</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isValidUsername:(NSString *)username</Declaration>
			<Parameters>
				<Parameter>
					<Name>username</Name>
					<Abstract>the name to check</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true if username is a non-nil, non-empty string</Abstract></ReturnValue>
			<Anchor>//api/name/isValidUsername:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/isValidPassword:</TokenIdentifier>
			<Abstract>used to determine the validity of a password</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isValidPassword:(NSString *)password</Declaration>
			<Parameters>
				<Parameter>
					<Name>password</Name>
					<Abstract>the password to check</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff password is a non-nil, non-empty string</Abstract></ReturnValue>
			<Anchor>//api/name/isValidPassword:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/isValidServiceName:</TokenIdentifier>
			<Abstract>true iff service name is non-nil and non empty</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isValidServiceName:(NSString *)serviceName</Declaration>
			<Parameters>
				<Parameter>
					<Name>serviceName</Name>
					<Abstract>the service name to test</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff service name is non-nil and non empty</Abstract></ReturnValue>
			<Anchor>//api/name/isValidServiceName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/isValidKey:</TokenIdentifier>
			<Abstract>true iff key is non-nil and non empty</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isValidKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract>the key to test</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff key is non-nil and non empty</Abstract></ReturnValue>
			<Anchor>//api/name/isValidKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/usernameStoredInDefaultsForKey:</TokenIdentifier>
			<Abstract>queries the NSUserDefaults standardUserDefaults with the AgChoiceUsernameDefaultsKey</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (NSString *)usernameStoredInDefaultsForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract>the defaults key</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>if there is no entry, will return nil</Abstract></ReturnValue>
			<Anchor>//api/name/usernameStoredInDefaultsForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/deleteUsernameInDefaultsForKey:error:</TokenIdentifier>
			<Abstract>deletes the value (if any) for the key AgChoiceUsernameDefaultsKey from the
NSUserDefaults standardUserDefaults</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)deleteUsernameInDefaultsForKey:(NSString *)key error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract>the key under which to look for the username</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>catches invalid key errors</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff the delete was successful</Abstract></ReturnValue>
			<Anchor>//api/name/deleteUsernameInDefaultsForKey:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/setDefaultsUsername:forKey:error:</TokenIdentifier>
			<Abstract>sets the value for key AgChoiceUsernameDefaultsKey in the NSUserDefaults
standardUserDefaults</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)setDefaultsUsername:(NSString *)username forKey:(NSString *)key error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>username</Name>
					<Abstract>the new value for AgChoiceUsernamDefaultsKey</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract>the key to store the username under</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>catches bad key and bad username</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff the username was succesfully set</Abstract></ReturnValue>
			<Anchor>//api/name/setDefaultsUsername:forKey:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/shouldUseKeychainWithKey:error:</TokenIdentifier>
			<Abstract>the BOOL value of the item stored in defaults under key</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)shouldUseKeychainWithKey:(NSString *)key error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract>the key under which the should use keychain value is stored</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>catches bad key</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>the BOOL value of the item stored in defaults under key</Abstract></ReturnValue>
			<Anchor>//api/name/shouldUseKeychainWithKey:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/deleteShouldUseKeychainInDefaults:error:</TokenIdentifier>
			<Abstract>true iff the delete was successful</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)deleteShouldUseKeychainInDefaults:(NSString *)key error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract>the key to lookup (and delete) from defaults</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>catches bad key</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff the delete was successful</Abstract></ReturnValue>
			<Anchor>//api/name/deleteShouldUseKeychainInDefaults:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/setDefaultsShouldUseKeychain:key:error:</TokenIdentifier>
			<Abstract>sets defaults value to shouldUse for key</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)setDefaultsShouldUseKeychain:(BOOL)shouldUse key:(NSString *)key error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>shouldUse</Name>
					<Abstract>the new value to store in the User Defaults</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract>the key under which to store the shouldUse value</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>catches bad key</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>sets defaults value to shouldUse for key</Abstract></ReturnValue>
			<Anchor>//api/name/setDefaultsShouldUseKeychain:key:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/hasKeychainPasswordForUsername:serviceName:error:</TokenIdentifier>
			<Abstract>queries the keychain to see if a password is stored for username</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)hasKeychainPasswordForUsername:(NSString *)username serviceName:(NSString *)serviceName error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>username</Name>
					<Abstract>the name we want the password for</Abstract>
				</Parameter><Parameter>
					<Name>serviceName</Name>
					<Abstract>the keychain service name</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>catches bad usernames</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff the keychain has a password for the username</Abstract></ReturnValue>
			<Anchor>//api/name/hasKeychainPasswordForUsername:serviceName:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/keychainPasswordForUsernameInDefaults:serviceName:error:</TokenIdentifier>
			<Abstract>queries the keychain for the password stored for username</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (NSString *)keychainPasswordForUsernameInDefaults:(NSString *)key serviceName:(NSString *)serviceName error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract>the key under the username is stored</Abstract>
				</Parameter><Parameter>
					<Name>serviceName</Name>
					<Abstract>the keychain service name</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>catches bad key and Keychain Access error</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>returns the password stored for the username in the defaults or nil if
no password is found</Abstract></ReturnValue>
			<Anchor>//api/name/keychainPasswordForUsernameInDefaults:serviceName:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/keychainDeletePasswordForUsername:serviceName:error:</TokenIdentifier>
			<Abstract>deletes the password for the keychain entry for the username</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)keychainDeletePasswordForUsername:(NSString *)username serviceName:(NSString *)serviceName error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>username</Name>
					<Abstract>the username for the password we would like to delete</Abstract>
				</Parameter><Parameter>
					<Name>serviceName</Name>
					<Abstract>the service name for the password</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>catches Keychain Access error</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff password was deleted</Abstract></ReturnValue>
			<Anchor>//api/name/keychainDeletePasswordForUsername:serviceName:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/keychainStoreUsername:serviceName:password:error:</TokenIdentifier>
			<Abstract>stores a username and password to the keychain</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)keychainStoreUsername:(NSString *)username serviceName:(NSString *)serviceName password:(NSString *)password error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>username</Name>
					<Abstract>the username for the password we would like to store</Abstract>
				</Parameter><Parameter>
					<Name>serviceName</Name>
					<Abstract>the service name for the password</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract>the password to store for the username</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>catches Keychain Access error</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff store was successful</Abstract></ReturnValue>
			<Anchor>//api/name/keychainStoreUsername:serviceName:password:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/synchronizeKeychainAndDefaultsWithUsername:usernameDefaultsKey:password:shouldUseKeychainDefaultsKey:shouldUseKeyChain:serviceName:error:</TokenIdentifier>
			<Abstract>synchronizes the Keychain and User Defaults</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)synchronizeKeychainAndDefaultsWithUsername:(NSString *)username usernameDefaultsKey:(NSString *)usernameKey password:(NSString *)password shouldUseKeychainDefaultsKey:(NSString *)shouldUseKeychainKey shouldUseKeyChain:(BOOL)shouldUseKeychain serviceName:(NSString *)serviceName error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>username</Name>
					<Abstract>the username to persist to defaults</Abstract>
				</Parameter><Parameter>
					<Name>usernameKey</Name>
					<Abstract>the key under which to persist the username</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract>the password to store</Abstract>
				</Parameter><Parameter>
					<Name>shouldUseKeychainKey</Name>
					<Abstract>the key under which shouldUseKeychain value is stored</Abstract>
				</Parameter><Parameter>
					<Name>shouldUseKeychain</Name>
					<Abstract>the value to store under shouldUseKeychainKey</Abstract>
				</Parameter><Parameter>
					<Name>serviceName</Name>
					<Abstract>the service name for the password</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>catches Keychain Access error</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff synchronization is successful</Abstract></ReturnValue>
			<Anchor>//api/name/synchronizeKeychainAndDefaultsWithUsername:usernameDefaultsKey:password:shouldUseKeychainDefaultsKey:shouldUseKeyChain:serviceName:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/ljsKeychainManagerErrorWithCode:error:</TokenIdentifier>
			<Abstract>Sets the error using Reporter API</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)ljsKeychainManagerErrorWithCode:(NSInteger)code error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>code</Name>
					<Abstract>the error code use</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>the error to populate</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>always returns YES - return is include to suppress analyzer warnings</Abstract></ReturnValue>
			<Anchor>//api/name/ljsKeychainManagerErrorWithCode:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/logKeychainError:</TokenIdentifier>
			<Abstract>prints error information to the log stream(s)</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (void)logKeychainError:(NSError *)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract>the error to log</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/logKeychainError:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsKeychainManager/isValidString:</TokenIdentifier>
			<Abstract>true iff string is non-nil and non-empty</Abstract>
			<DeclaredIn>LjsKeychainManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isValidString:(NSString *)string</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract>the string to test</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff string is non-nil and non-empty</Abstract></ReturnValue>
			<Anchor>//api/name/isValidString:</Anchor>
		</Token>
		
	</File>
</Tokens>