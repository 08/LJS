<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/LjsDn.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/LjsDn</TokenIdentifier>
			<Abstract>NSDecimalNumber is a powerful tool for handling currency, statistics, and other
floating point data.  The class name and the methods are, in my opinion, overly
verbose and tend to clutter code at the worse times - when you are doing
sensitive currency calculations or implementing a complex confusing statistical
algorithm.  And who can remember how to compare two NSDecimalNumbers?</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>
			
			<NodeRef refid="6"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dnWithInteger:</TokenIdentifier>
			<Abstract>a decimal number with the integer value</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (NSDecimalNumber *)dnWithInteger:(NSInteger)aInteger</Declaration>
			<Parameters>
				<Parameter>
					<Name>aInteger</Name>
					<Abstract>an integer</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>a decimal number with the integer value</Abstract></ReturnValue>
			<Anchor>//api/name/dnWithInteger:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dnWithUInteger:</TokenIdentifier>
			<Abstract>a decimal number with the uinteger value</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (NSDecimalNumber *)dnWithUInteger:(NSUInteger)aUInteger</Declaration>
			<Parameters>
				<Parameter>
					<Name>aUInteger</Name>
					<Abstract>a uinteger</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>a decimal number with the uinteger value</Abstract></ReturnValue>
			<Anchor>//api/name/dnWithUInteger:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dnWithDouble:</TokenIdentifier>
			<Abstract>a decimal number with the double value</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (NSDecimalNumber *)dnWithDouble:(double)aDouble</Declaration>
			<Parameters>
				<Parameter>
					<Name>aDouble</Name>
					<Abstract>a double</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>a decimal number with the double value</Abstract></ReturnValue>
			<Anchor>//api/name/dnWithDouble:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dnWithString:</TokenIdentifier>
			<Abstract>a decimal number with the string value</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (NSDecimalNumber *)dnWithString:(NSString *)aString</Declaration>
			<Parameters>
				<Parameter>
					<Name>aString</Name>
					<Abstract>a string</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>a decimal number with the string value</Abstract></ReturnValue>
			<Anchor>//api/name/dnWithString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dnWithNumber:</TokenIdentifier>
			<Abstract>a decimal number from aNumber</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (NSDecimalNumber *)dnWithNumber:(NSNumber *)aNumber</Declaration>
			<Parameters>
				<Parameter>
					<Name>aNumber</Name>
					<Abstract>a number</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>a decimal number from aNumber</Abstract></ReturnValue>
			<Anchor>//api/name/dnWithNumber:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dn:e:</TokenIdentifier>
			<Abstract>true iff a = b</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)dn:(NSDecimalNumber *)a e:(NSDecimalNumber *)b</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract>left hand side</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract>right hand side</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff a = b</Abstract></ReturnValue>
			<Anchor>//api/name/dn:e:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dn:lt:</TokenIdentifier>
			<Abstract>*</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)dn:(NSDecimalNumber *)a lt:(NSDecimalNumber *)b</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract>left hand side</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract>right hand side</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff a lt b</Abstract></ReturnValue>
			<Anchor>//api/name/dn:lt:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dn:gt:</TokenIdentifier>
			<Abstract>true iff a gt b</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)dn:(NSDecimalNumber *)a gt:(NSDecimalNumber *)b</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract>left hand side</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract>right hand side</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff a gt b</Abstract></ReturnValue>
			<Anchor>//api/name/dn:gt:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dn:lte:</TokenIdentifier>
			<Abstract>true iff a lte b</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)dn:(NSDecimalNumber *)a lte:(NSDecimalNumber *)b</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract>left hand side</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract>right hand side</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff a lte b</Abstract></ReturnValue>
			<Anchor>//api/name/dn:lte:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dn:gte:</TokenIdentifier>
			<Abstract>true iff a gte b</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)dn:(NSDecimalNumber *)a gte:(NSDecimalNumber *)b</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract>left hand side</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract>right hand side</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>true iff a gte b</Abstract></ReturnValue>
			<Anchor>//api/name/dn:gte:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/dn:isOnMin:max:</TokenIdentifier>
			<Abstract>return true iff a is on (min, max)</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)dn:(NSDecimalNumber *)a isOnMin:(NSDecimalNumber *)min max:(NSDecimalNumber *)max</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract>number to test</Abstract>
				</Parameter><Parameter>
					<Name>min</Name>
					<Abstract>lower bound of range</Abstract>
				</Parameter><Parameter>
					<Name>max</Name>
					<Abstract>upper bound or range</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>return true iff a is on (min, max)</Abstract></ReturnValue>
			<Anchor>//api/name/dn:isOnMin:max:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/round:withHandler:</TokenIdentifier>
			<Abstract>rounded decimal number with handler</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (NSDecimalNumber *)round:(NSDecimalNumber *)number withHandler:(NSDecimalNumberHandler *)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>number</Name>
					<Abstract>the number to round</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract>the handler to use</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>rounded decimal number with handler</Abstract></ReturnValue>
			<Anchor>//api/name/round:withHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/statisticsHandlerWithRoundMode:scale:</TokenIdentifier>
			<Abstract>NB: typically you will want to use NSRoundPlain for statistics</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (NSDecimalNumberHandler *)statisticsHandlerWithRoundMode:(NSRoundingMode)aMode scale:(NSUInteger)aInteger</Declaration>
			<Parameters>
				<Parameter>
					<Name>aMode</Name>
					<Abstract>a rounding mode</Abstract>
				</Parameter><Parameter>
					<Name>aInteger</Name>
					<Abstract>a scale (precision)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>a handler with mode and scale</Abstract></ReturnValue>
			<Anchor>//api/name/statisticsHandlerWithRoundMode:scale:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/LjsDn/locationHandlerWithRoundMode:scale:</TokenIdentifier>
			<Abstract>NB: typically you will want to use NSRoundPlain for location</Abstract>
			<DeclaredIn>NSDecimalNumber+LjsAdditions.h</DeclaredIn>			
			
			<Declaration>+ (NSDecimalNumberHandler *)locationHandlerWithRoundMode:(NSRoundingMode)aMode scale:(NSUInteger)aInteger</Declaration>
			<Parameters>
				<Parameter>
					<Name>aMode</Name>
					<Abstract>a rounding mode</Abstract>
				</Parameter><Parameter>
					<Name>aInteger</Name>
					<Abstract>a scale (precision)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>a handler with mode and scale</Abstract></ReturnValue>
			<Anchor>//api/name/locationHandlerWithRoundMode:scale:</Anchor>
		</Token>
		
	</File>
</Tokens>