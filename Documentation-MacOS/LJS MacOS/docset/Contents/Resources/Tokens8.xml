<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/LjsJsonRpcReply.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/LjsJsonRpcReply</TokenIdentifier>
			<Abstract>LjsJsonRpcReply parses a JSON-RPC 1.0 or JSON 2.0 string (reply), validates
the reply for format and specification (1.0 or 2.0) and generates the
necessary NSErrors.</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>
			
			<NodeRef refid="8"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/setErrorFoundInReply:</TokenIdentifier>
			<Abstract>if non-nil, indicates the reply contained an error key</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSError *errorFoundInReply</Declaration>
			
			
			<Anchor>//api/name/errorFoundInReply</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/LjsJsonRpcReply/errorFoundInReply</TokenIdentifier>
			<Abstract>if non-nil, indicates the reply contained an error key</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSError *errorFoundInReply</Declaration>
			
			
			<Anchor>//api/name/errorFoundInReply</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/setJsonRpcFormatError:</TokenIdentifier>
			<Abstract>if non-nil, indicates the reply contained a json-rpc formatting error, such
as an invalid json-rpc key</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSError *jsonRpcFormatError</Declaration>
			
			
			<Anchor>//api/name/jsonRpcFormatError</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/LjsJsonRpcReply/jsonRpcFormatError</TokenIdentifier>
			<Abstract>if non-nil, indicates the reply contained a json-rpc formatting error, such
as an invalid json-rpc key</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSError *jsonRpcFormatError</Declaration>
			
			
			<Anchor>//api/name/jsonRpcFormatError</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/setJsonParseError:</TokenIdentifier>
			<Abstract>if non-nil, indicates there was a problem parsing the json - the error will
be generated by the SBJSON SBJsonParser objectWithString: method.</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSError *jsonParseError</Declaration>
			
			
			<Anchor>//api/name/jsonParseError</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/LjsJsonRpcReply/jsonParseError</TokenIdentifier>
			<Abstract>if non-nil, indicates there was a problem parsing the json - the error will
be generated by the SBJSON SBJsonParser objectWithString: method.</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSError *jsonParseError</Declaration>
			
			
			<Anchor>//api/name/jsonParseError</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/setParser:</TokenIdentifier>
			<Abstract>the parser</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) SBJsonParser *parser</Declaration>
			
			
			<Anchor>//api/name/parser</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/LjsJsonRpcReply/parser</TokenIdentifier>
			<Abstract>the parser</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) SBJsonParser *parser</Declaration>
			
			
			<Anchor>//api/name/parser</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/setReplyDict:</TokenIdentifier>
			<Abstract>the result of the parsing</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSDictionary *replyDict</Declaration>
			
			
			<Anchor>//api/name/replyDict</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/LjsJsonRpcReply/replyDict</TokenIdentifier>
			<Abstract>the result of the parsing</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSDictionary *replyDict</Declaration>
			
			
			<Anchor>//api/name/replyDict</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/initWithJsonReply:</TokenIdentifier>
			<Abstract>This method populates all the properties.</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>- (id)initWithJsonReply:(NSString *)json</Declaration>
			<Parameters>
				<Parameter>
					<Name>json</Name>
					<Abstract>a string in JSON-RPC 1.0 or 2.0 format</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>an initialized receiver which is ready to accept queries about
errors found, validity, and results</Abstract></ReturnValue>
			<Anchor>//api/name/initWithJsonReply:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/replyWasValidJson</TokenIdentifier>
			<Abstract>true iff the reply was valid json</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>- (BOOL)replyWasValidJson</Declaration>
			
			<ReturnValue><Abstract>true iff the reply was valid json</Abstract></ReturnValue>
			<Anchor>//api/name/replyWasValidJson</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/replyWasValidRpc</TokenIdentifier>
			<Abstract>If you are using JSON-RPC 1.0, you need to be sure to define a compiler
macro JSONRPC10.</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>- (BOOL)replyWasValidRpc</Declaration>
			
			<ReturnValue><Abstract>true iff the reply was valid JSON-RPC</Abstract></ReturnValue>
			<Anchor>//api/name/replyWasValidRpc</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/replyHasRpcError</TokenIdentifier>
			<Abstract>true iff the reply contained a JSON-RPC error message</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>- (BOOL)replyHasRpcError</Declaration>
			
			<ReturnValue><Abstract>true iff the reply contained a JSON-RPC error message</Abstract></ReturnValue>
			<Anchor>//api/name/replyHasRpcError</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/replyHasResult</TokenIdentifier>
			<Abstract>true iff the reply contained a JSON-RPC result (not an error)</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>- (BOOL)replyHasResult</Declaration>
			
			<ReturnValue><Abstract>true iff the reply contained a JSON-RPC result (not an error)</Abstract></ReturnValue>
			<Anchor>//api/name/replyHasResult</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/replyId</TokenIdentifier>
			<Abstract>this method is only valid for JSON-RPC 2.0</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>- (NSInteger)replyId</Declaration>
			
			<ReturnValue><Abstract>the reply id contained in the reply</Abstract></ReturnValue>
			<Anchor>//api/name/replyId</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/LjsJsonRpcReply/errorWithDictionary:</TokenIdentifier>
			<Abstract>this method does not need to be called directly - it is a convenience
method for the class</Abstract>
			<DeclaredIn>LjsJsonRpcReply.h</DeclaredIn>			
			
			<Declaration>- (NSError *)errorWithDictionary:(NSDictionary *)errorDict</Declaration>
			<Parameters>
				<Parameter>
					<Name>errorDict</Name>
					<Abstract>the error dictionary from the reply</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>an error using the error dictionary.</Abstract></ReturnValue>
			<Anchor>//api/name/errorWithDictionary:</Anchor>
		</Token>
		
	</File>
</Tokens>